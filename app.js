// Generated by CoffeeScript 1.6.3
(function() {
  var Collection, Model, View, _ref, _ref1, _ref2, _ref3,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Model = Backbone.Model, Collection = Backbone.Collection, View = Backbone.View;

  /*
  recall that coffeescript will wrap our app
  	in a function that prevents us from polluting
  	the global scope.
  
  We define App as a globally so we can play with it
  	in terminal. Think of App as our namespace
  */


  window.App = {};

  /*
   Here's a model we know and love,
   	except we reference it as belonging to App
  */


  App.Person = (function(_super) {
    __extends(Person, _super);

    function Person() {
      _ref = Person.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Person.prototype.defaults = {
      name: "Unknown"
    };

    return Person;

  })(Model);

  App.People = (function(_super) {
    __extends(People, _super);

    function People() {
      _ref1 = People.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    People.prototype.model = App.Person;

    return People;

  })(Collection);

  App.PersonView = (function(_super) {
    __extends(PersonView, _super);

    function PersonView() {
      this.deletePerson = __bind(this.deletePerson, this);
      _ref2 = PersonView.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    PersonView.prototype.tagName = "div";

    PersonView.prototype.template = function(html) {
      var $temp;
      $temp = $("#pv").html();
      return _.template($temp)(html);
    };

    PersonView.prototype.render = function() {
      this.$el.html(this.template(this.model.toJSON()));
      /*
      		 NOTE: having @ at the end of render
      		 		`returns this`, which is useful
      		 		for chaining functions. Feel free
      		 		to ask about this
      */

      return this;
    };

    PersonView.prototype.events = {
      'click .delete': 'deletePerson'
    };

    PersonView.prototype.deletePerson = function() {
      this.model.destroy();
      return this.remove();
    };

    return PersonView;

  })(View);

  App.PeopleView = (function(_super) {
    __extends(PeopleView, _super);

    function PeopleView() {
      _ref3 = PeopleView.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    PeopleView.prototype.el = "#people";

    PeopleView.prototype.initialize = function(people) {
      this.collection = new App.People(people);
      return this.render();
    };

    PeopleView.prototype.render = function() {
      return this.collection.each(function(person) {
        return this.renderPerson(person);
      }, this);
    };

    PeopleView.prototype.renderPerson = function(person) {
      var personView;
      personView = new App.PersonView({
        model: person
      });
      return this.$el.append(personView.render().el);
    };

    return PeopleView;

  })(View);

  $(function() {
    var people;
    people = [
      {
        name: "Moe"
      }, {
        name: "Larry"
      }, {
        name: "Curly"
      }
    ];
    return App.myPeople = new App.PeopleView(people);
  });

}).call(this);
